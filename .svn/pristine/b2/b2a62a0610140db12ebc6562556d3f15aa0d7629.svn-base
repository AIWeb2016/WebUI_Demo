<!DOCTYPE html>
<head>
<meta charset="utf-8">
<title>data-panel</title>
<style>.textSize{font-size:14px;}</style>
</head>
<body>
<div class="cont main_doc">
	<div class="tab_menu">
		<ul>
			<li class="tab_menu_current">1.获取代码</li>
			<li>2.配置 Nginx</li>
			<li>3.配置 Aries</li>
			<li>4.书写规范</li>
			<li>5.Ajax请求</li>
			<li>6.Demo</li>
		</ul>
	</div>
	<div class="tab_main">
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														1.获取代码													   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docAttribute" style="display:block">
			<h3>获取源码包 assets</h3>
			<br />
			<p class="textSize">将整个 assets 文件夹放置在 Nginx 服务器 html 目录下。</p>
			<br />
			<p class="textSize">目录结构如下：</p>
			<br />
			<img src="css/images/assetsFile.jpg" />
		</div>
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														2.配置 Nginx												   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docFunction">
			<h3>配置 Nginx</h3>
			<br />
			<p class="textSize">修改 Nginx 配置文件 nginx/conf/nginx.conf ( " # " 号开头为代码注释 )，新增 Aries 相关配置；</p>
			<br />
			<p class="textSize">系统访问 URL 为：<u>http://localhost:7777/ariesSaaS/index.html</u></p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">标准配置文件示例（工程名：mySaaS）：</h4>
				<pre><code  class="html">
server {
    listen       7777;			
    server_name  localhost;
    location / {
        root   html;
        index  index.html index.htm;
    }

    # 解决请求本地 json 文件失败的问题。
    error_page  405 =200 $uri;	

    # ARIESRES 是静态资源的访问 webroot ，属于 Aries 组件代码命名规范，请与 Aries 配置文件 assets/aries/config/aries-config.js 保持一致；
    # mySaaS/html 为工程 mySaaS 相对与 nginx/html 目录的地址，指定到工程 html 目录。
    location /ARIESRES {
        rewrite "^/ARIESRES/(.+)" /mySaaS/html/$1 last;
    }

    # ariesSaaS 为访问系统 url 中的 webroot，可定义为其他名称，但不可定义为工程名。
    # mySaaS/html为工程 mySaaS 相对与 nginx/html 目录的地址，指定到工程html目录。
    location /ariesSaaS {
        rewrite "^/ariesSaaS/(.+)" /mySaaS/html/$1 last;
    }

    # 如果 mySaaS 工程需要访问外部工程 staticWeb ，需配置外部工程的 ip、端口和工程名；
    # otherWeb 为访问标识，可定义为其他名称，但不可定义为工程名。
    location /otherWeb {
        proxy_pass http://121.41.104.57:5091/staticWeb;
    }
	
    error_page   500 502 503 504  /50x.html;
	
    location = /50x.html {
        root   html;
    }
}
				</code></pre>
			</div>
			<!-- <div class="code_box">
				<h4 class="tit_line">配置文件说明</h4>
				<pre><code  class="html">
server {
    listen       7777;			
    server_name  localhost;
    location / {
        root   html;
        index  index.html index.htm;
    }
		
    # 新增此行代码，解决请求本地json文件失败的问题。
    error_page  405 =200 $uri;	
		
    # 新增以下代码段，用于请求资源文件。
    # 其中ARIESRES 是静态资源的访问webroot，属于aries组件代码命名规范，请与aries配置文件assets/aries/config/aries-config.js保持一致；（如下图）
    # mySaaS/html为工程mySaaS相对与nginx/html目录的地址，指定到工程html目录。
    location /ARIESRES/ {
        rewrite "^/ARIESRES/(.+)" /mySaaS/html/$1 last;
        #如果assets文件夹直接放在nginx/html目录下，则配置如下
        #rewrite "^/ARIESRES/(.+)"  /$1 last;
    }

    # 新增以下代码段，用于访问工程。
    # verisSaaS为访问系统url中的webroot，可定义为其他名称，但不可定义为工程名。
    # mySaaS/html为工程mySaaS相对与nginx/html目录的地址，指定到工程html目录。
    location /verisSaaS/ {
        rewrite "^/ verisSaaS /(.+)" /mySaaS/html/$1 last;
    }

    # 如果nginx工程需要访问外部工程，需新增以下代码段。
    # 如部署在nginx上的工程mySaaS需要访问部署在tomcat上的工程staticWeb，
    # staticWeb为访问标识，可定义为其他名称，但不可定义为工程名。
    # 这里只能用proxy_pass配置跳转。
    # proxy_pass需配置目标工程的ip、端口和工程名。

    location /staticWeb/ {
        proxy_pass http:// 121.41.104.57:5091/staticWeb/;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
				</code></pre>
			</div> -->


			
			
		</div>
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														3.配置 Aries												   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docEvent">
			<h3>配置 Aries</h3>
			<br />
			<p class="textSize">① 修改 Aries 配置文件 assets/aries/config/aries-config.js </p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">标准配置文件示例（工程名：mySaaS）：</h4>
				<pre><code  class="html">
define(function (require, exports, moudles) {
    $.extend($.aries, {
        config : {
            common : {
                //加载页面url前缀，与nginx配置一致
                PAGE_REDIRECT_PREFIX : '/ARIESRES/',
                //ajax请求sv的url地址
                AJAX_URL_SV_PREFIX : '',
                //ajax请求json的url地址，与nginx配置一致
                AJAX_URL_JSON_PREFIX : '/ARIESRES/',
                //url串是否要encode编码，默认true
                IS_AJAX_URL_ENCODE : true,
                //写入cookie中国际化语言的key值
                I18N_LOCALE_KEY : 'AE_I18N',
                //默认显示语言
                I18N_LOCALE_DEFAULT : 'en_US',
                //业务流可访问SV路径前缀 
                BIZFLOW_SUBMIT_SV_PREFIX : 'HubCrmServlet'
            },
            sec : {
                //临时授权Token的类型，有操作员授权与客户授权两种
                SEC_OPERATOR_TEMP_TOKEN : 'SEC_OPERATOR_TEMP_TOKEN',
                SEC_CUSTOMER_TEMP_TOKEN : 'SEC_CUSTOMER_TEMP_TOKEN',
                //临时授权Token传输给hub的code与value标识
                SEC_TEMP_AUTH_TOKEN_TO_HUB_CODE : 'tempAuthCode',
                SEC_TEMP_AUTH_TOKEN_TO_HUB_VALUE : 'tempAuthValue',
                //临时授权服务的入参授权人类型 ，操作员或客户 
                SEC_TEMP_PERMISSION_TOKEN_TYPE_OPERATOR : 'Operator',
                SEC_TEMP_PERMISSION_TOKEN_TYPE_CUSTOMER : 'Customer',
                //临时授权服务的入参授权对象类型 ，功能集、服务 、数据权限 、属主授权
                SEC_TEMP_PERMISSION_ENTITY_TYPE_FUNCTIONSET : 'FunctionSet',
                SEC_TEMP_PERMISSION_ENTITY_TYPE_SERVICE : 'Service',
                SEC_TEMP_PERMISSION_ENTITY_TYPE_DATA : 'Data',
                SEC_TEMP_PERMISSION_ENTITY_TYPE_OWNER : 'Owner',
                //临时授权服务的入参授权类型，密码 
                SEC_TEMP_PERMISSION_AUTHOR_TYPE_PWD : '1',
                //临时授权服务的入参需验证的输入信息，用户名、密码 
                SEC_TEMP_PERMISSION_CHECK_INPUT_USERNAME : 'username',
                SEC_TEMP_PERMISSION_CHECK_INPUT_PWD : 'password',
                //权限服务返回编码类型，有权限 、未登录无权限、已登录无权限
                SEC_RETURN_TYPE_SUCCESS : 'AISEC0001',
                SEC_RETURN_TYPE_UNLOGIN_FAIL : 'AISEC0002',
                SEC_RETURN_TYPE_LOGINED_FAIL : 'AISEC0003',
				
                //Auth服务返回编码类型，不支持此种临时授权认证方式
                SEC_AUTH_TYPE_AUTHOR_TYPE_WRONG : 'AIATH0001',
                //Auth服务返回编码类型，操作员登陆验证信息失败，主要是登陆后返回的user为空
                SEC_AUTH_TYPE_LOGIN_FAILURE : 'AIATH0005',
                //Auth服务返回编码类型，session失效
                SEC_AUTH_TYPE_SESSION_EXPIRE : 'AIAUTH0008',
                //写入cookie中Token的key值
                SEC_AUTH_TOKEN_KEY : 'AppEngine_TokenId',
                //写入cookie中租户的key值
                SEC_AUTH_TENANT_KEY : 'AE_TENANT'
            }
        }
    });
});
				</code></pre>
			</div>
			<p class="textSize"><span class="code">其中，AJAX_URL_SV_PREFIX的值配置后，所有ajax请求都会请求到这个地址，而不会访问nginx，使用时请慎重！</span></p>
			<p></p>
			<p class="textSize">② 配置 Aries 服务清单 assets/aries/config/aries-service.js </p>
			<br />
			<p class="textSize">配置 ajax 请求地址，可配置json数据，也可配置后台服务，较好的实现前后台开发分离。 </p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">标准服务清单示例（工程名：mySaaS）：</h4>
				<pre><code  class="html">
define(function (require, exports, moudles) {
    $.extend($.aries, {
        service : {
            demo : {
                tpl : '/assets/data/tpl.json',
                menu : '/demo/data/menu.json'
            },
            veris7 : {
                login : '/HubCrmServlet?servicecode=login',
                familyData : '/HubCrmServlet?servicecode=loadCustomerOrderInfo'
            }
        }
    });
});
				</code></pre>
			</div>
			
		</div>
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														4.书写规范													   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docEvent">
			<h3>页面书写规范</h3>
			<br />
			<div class="code_box">
				<h4 class="tit_line">标准文档模版（工程名：mySaaS）：</h4>
				<pre><code  class="html">
&lt;!doctype html>
&lt;html>
&lt;head>
    &lt;meta charset="utf-8" />
    <title>标准文档模版</title>
    &lt;link rel="stylesheet" href="/ARIESRES/assets/aries/css/base/aries-base.css" />
    &lt;script src="/ARIESRES/assets/aries/lib/jquery.js">&lt;/script>
    &lt;script src="/ARIESRES/assets/aries/main/sea.js">&lt;/script>
&lt;/head>
&lt;body>
    <div>页面内容区域</div>
&lt;/body>
&lt;script type="text/javascript">
seajs.use('aries-main',function(){
    //初始化逻辑写在这里
});

//匿名函数写在这里
&lt;/script>
&lt;/html>
				</code></pre>
			</div>
			
		</div>
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														5.Ajax请求													   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docEvent">
			<h3>Ajax 请求</h3>
			<ul class="options-list">
				<li class="li_current">
					<span class="option_tit"><em class="option_arrow-drop"></em>ajax</span>
					<span class="option_bo">$.ajaxPost(url,param,function,function,async)</span>
					<ul class="li_open">
						<div class="par">
							<p>通过ajax方法获取后台返回数据，加载模版区域展示数据。末尾的参数可以省略，中间的参数不可省略，可用null占位。</p>
							<h4 class="descParam">参数（严格顺序）:</h4>
							<p><span class="e_green">url</span> - 服务请求地址（必须参数）。</p>
							<p><span class="e_green">param</span> - 服务请求入参（根据业务需要设定，格式为<span class="code">键值对</span>拼接的字符串，用<span class="code">& </span>符号连接）。如：<span class="code">"key1=value1&key2=value2"</span></p>
							<p><span class="e_green">function(data){}</span> - 请求服务成功后执行的回调函数（必须参数）；data为服务返回的数据。</p>
							<p><span class="e_green">function(code,info){}</span> - 请求服务失败后执行的回调函数（必须参数）；code为错误编码，info为错误信息。</p>
							<p><span class="e_green">{async:true}</span> - 默认异步执行（如需同步执行，可设置<span class="code">{async:false}</span>）。</p>
							<h4 class="descReturn">返回:</h4>
							<p></p>
						</div>
						<div class="code_box">
							<h4 class="tit_line">示例</h4>
							<!-- 组件示例代码区域 -->
							<pre><code class="html">
&lt;div id="demo-tpl" aeType="aeTpl" aeInit="true">...&lt;/div>							
&lt;script type="text/javascript">
seajs.use('aries-main',function(){
    $.ajaxPost($.aries.service.demo.tpl,null,function(data){
        if(data){
            $("#demo-tpl").aeTpl('reload',data);
        }
    },function(code,info){
        alert(code+": "+info);
    },{async:false);
});
&lt;/script>							

							</code></pre>
						</div>
					</ul>
				</li>
			</ul>
			
		</div>
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<!-- 														6.Demo														   -->
		<!-- --------------------------------------------------------------------------------------------------------------------- -->
		<div class="tab_contents docEvent">
			<h3>Demo</h3>
			<br />
			<p class="textSize">①	将 mySaaS 工程部署到 nginx/html/ 目录下，或 svn 代码检出到 nginx/html/mySaaS/ 目录下，并将前端组件源码包 assets 文件夹放在工程目录 nginx/html/mySaaS/html/ 下。</p>
			<br />
			<p class="textSize">②	在 nginx/html/mySaaS/html/ 目录下新建 demo.html ，代码如下：</p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">demo.html（工程名：mySaaS）：</h4>
				<pre><code  class="html">
&lt;!doctype html>
&lt;html>
&lt;head>
    &lt;meta charset="utf-8" />
    <title>demo</title>
    &lt;link rel="stylesheet" href="/ARIESRES/assets/aries/css/base/aries-base.css" />
    &lt;script src="/ARIESRES/assets/aries/lib/jquery.js">&lt;/script>
    &lt;script src="/ARIESRES/assets/aries/main/sea.js">&lt;/script>
&lt;/head>
&lt;body>
    <div id="demo-tpl" aeType="aeTpl" aeInit="true" class="ae_tpl">
        <center><h1>{{title}}</h1></center>
    </div>
&lt;/body>
&lt;script type="text/javascript">
seajs.use('aries-main',function(){
    $.ajaxPost($.aries.service.demo.tpl,null,function(data){
        if(data){
            $("#demo-tpl").aeTpl('reload',data);
        }
    },function(code,info){
        $.message.error("","","load data fail,code:"+code+",info:"+info);
    });
});
&lt;/script>
&lt;/html>
				</code></pre>
			</div>
			<p class="textSize">③	服务配置文件 assets/aries/config/aries-service.js 中新增配置参数：</p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">aries-service.js（工程名：mySaaS）：</h4>
				<pre><code  class="html">
service : {
    demo : {
        tpl : '/assets/data/tpl.json'
    }
}
				</code></pre>
			</div>
			<p class="textSize">④	在 nginx/html/mySaaS/html/assets/ 目录下新建 data/tpl.json ，代码如下：</p>
			<br />
			<div class="code_box">
				<h4 class="tit_line">tpl.json（工程名：mySaaS）：</h4>
				<pre><code  class="html">
{"data":{
    "title":"Hello world!"
    },
"hub_code":"1",
"hub_value":[],
"code":"",
"value":""
}
				</code></pre>
			</div>
			<p class="textSize">⑤	开启nginx服务，浏览器访问工程地址：<u>http://localhost:7777/ariesSaaS/demo.html</u></p>
			<br />
			<br />
		</div>
		
		
	</div>
</div>
</body>
 <script type="text/javascript" src="../../../lib/jquery/1.11.3/jquery.js"></script>
<script type="text/javascript">
//组件属性、方法、事件页签切换
    $('.tab_menu ul li').click(function(){
        $(this).addClass('tab_menu_current').siblings().removeClass('tab_menu_current');
        $('.tab_main>div:eq('+$(this).index()+')').fadeIn(800).siblings().hide();   
    });
    if($('.li_open').attr("initShowDesc") !== "true"){
        $('.options-list li').removeClass("li_current");
        $('.options-list li em').toggleClass("option_arrow-drop");
        $('.options-list li em').toggleClass("option_arrow");
        $('.li_open').children().hide();
        $('.li_open').hide();
    }



 
</script>
</html>